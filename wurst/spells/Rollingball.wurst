package Rollingball
import Projectile
import Fx
import initlater Child
import SoundUtils
import Collision
import ClosureTimers
import Assets
import AbilityTooltipGenerator

public constant ROLLINGBALL_SPELL_ID = compiletime(ABIL_ID_GEN.next())

constant STARTMOMENTUM = 2.
constant MOMENTUMMAX = 25.
constant SIZEGAIN = .075
constant MAXSIZE = 23.5

constant startRoll = new SoundDefinition("Abilities\\Spells\\Orc\\EarthQuake\\EarthquakeRock.wav", false, false)
constant hitTarget = new SoundDefinition("Abilities\\Spells\\Human\\FlakCannons\\FlakCannon.wav", false, false)
constant hitTargetBig = new SoundDefinition("big_impact.mp3", false, false)

public class Rollingball extends Projectile
	real momentum
	real size = 2.
	real startz

	construct(vec3 pos, player owner, angle angle)
		super(pos, 32., owner, angle, "war3mapImported\\rollingball.mdx")
		startz = pos.z + 16
		setSpeed(STARTMOMENTUM)
		momentum = STARTMOMENTUM
		startRoll.play()
		if owner.getId() > 4
			fx.setColor(colorA(255, 155, 155, 255))
		else
			fx.setColor(colorA(155, 155, 255, 255))
		registerCollidable(this, (other) -> onHit(other))
		registerCollider(this, SHAPE_SPHERE, (other) -> onHit(other))

	override function update()
		let terrainZ = pos.getTerrainZ()
		if not gg_rct_arenabounds.contains(pos.toVec2()) or terrainZ > startz + (radius / 3)
			terminate()
		else
			if momentum < MOMENTUMMAX
				momentum = momentum.lerp(MOMENTUMMAX, 0.005)
				setSpeed(momentum)
			if this.size < MAXSIZE
				this.size += SIZEGAIN
				fx.setScale(this.size)
				radius = 12 + this.size * 13
				radius2 = radius * radius - 48
			pos.z = pos.getTerrainZ()
			fx.getDummy().setTimeScale(momentum/MOMENTUMMAX * 0.5)

			super.update()
			fx.getDummy().setXYZReal(vec3(pos.x, pos.y, pos.z + radius / 2))


	function onHit(Entity e)
		if e.owner.isEnemyOf(owner)
			if e instanceof Child
				var c = e castTo Child
				flashEffect(Abilities.bloodImpact, pos)
				fx.getDummy().damageTarget(c.actor, (this.size - 3) * 2.75, ATTACK_TYPE_SIEGE)
			else if e instanceof Projectile
				doAfter(0.01) ->
					if e != null and not e.done and not e instanceof Child
						e.terminate()

	ondestroy
		let eff = addEffect("fracture.MDX", pos)..setRoll(GetRandomReal(0, 356).fromDeg())..setScale(size / 5.)
		if owner.getId() > 4
			eff.setColor(colorA(255, 155, 155, 255))
		else
			eff.setColor(colorA(155, 155, 255, 255))
		eff..destr()
		if size > MAXSIZE / 2.
			hitTargetBig.playOnPoint(pos)
		else
			hitTarget.playOnPoint(pos)
		removeCollidable(this)
		removeCollider(this)

@compiletime function getObjs()
	let tgen = new AbilityTooltipGenerator("A slowly rolling ball that gains size and momentum over time. Cannot roll uphill.")
	new ChannelAbilityPreset(ROLLINGBALL_SPELL_ID, 4, true, tgen)
	..presetButtonPosNormal(1, 1)
	..presetTargetTypes(Targettype.POINT)
	..setRequiredLevel(1)
	..tooltipStartListen()
	..presetHotkey("D")
	..setName("Rolling ball")
	..presetIcon("BTNSnowBall")
	..presetCooldown(lvl -> 25. - lvl)
	..presetManaCost(lvl -> 9 - (lvl / 2).toInt())
	..presetCastRange(lvl -> 500. + 50 * lvl)
	..tooltipStopListen()
