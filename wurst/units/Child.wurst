package Child
import initlater Snowball
import initlater Snowman
import Snowbomb
import Rollingball
import Iceshard
import TimedBar
import PhysicsEntity
import IceWall
import ClosureTimers
import Assets
import Collision
import ChannelAbilityPreset
import Tiles
import PlayerData
import KillStreaks
import GameConstants

public constant humChildren = new LinkedList<Child>()
public constant orcChildren = new LinkedList<Child>()

public constant LEFT_SPAWN = vec2(-2400, 4100)
public constant RIGHT_SPAWN = vec2(2020, 4100)

public constant JUMP_ID = compiletime(ABIL_ID_GEN.next())

public constant HUMAN_CHILD_ID = compiletime(HERO_ID_GEN.next())
public constant ORC_CHILD_ID = compiletime(HERO_ID_GEN.next())

public function getEnemyChildren(player owner) returns LinkedList<Child>
	if owner.getId() > 4
		return humChildren
	return orcChildren

public function getAlliedChildren(player owner) returns LinkedList<Child>
	if owner.getId() < 5
		return humChildren
	return orcChildren

public class MyUnitEntity extends UnitEntity
	construct(vec3 pos, player owner, int id)
		super(createUnit(owner, id, pos, 0 .fromDeg()), pos, 52.)

public class Child extends UnitEntity
	use PhysicsModule

	var fixPos = false
	effect excl = null
	TimedBar wrapBar
	SnowmanDummy snowman = null
	var sliding = false
	var slidespeed = 0.
	var slidevec = ZERO2
	var hasPresent = false
	int id

	construct(vec3 pos, player owner, int id)
		super(createUnit(owner, id, pos, 0 .fromDeg()), pos, 52.)
		this.id = id
		let eff = actor.addEffect("GeneralHeroGlow.mdx", "origin")
		sleeps = false
		if owner.getId() > 4
			eff.setColorByPlayer(players[0])
			orcChildren.add(this)
		else
			eff.setColorByPlayer(players[1])
			humChildren.add(this)

		restitution = .25
		surfaceFriction = 0.755
		actor..addAbility(JUMP_ID)

		EventListener.add(actor, EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> onCast())
		EventListener.add(actor, EVENT_PLAYER_UNIT_DEATH, () -> onDeath())
		addSpawnShield()
		registerCollidable(this, (e) -> skip)
		actor..selectSkill(SNOWBALL_SPELL_ID)..setSkillPoints(2)
		owner.selectSingle(actor)
		owner.panCamToTimed(actor, 0.)

	function onCast()
		var id = GetSpellAbilityId()
		var target = getSpellTargetPos().withTerrainZ()
		var castPos = getPos().add(0,0,48)
		let angle = pos.angleTo2d(target)
		let lvl = actor.getAbilityLevel(GetSpellAbilityId())

		castPos -= angle.toVec(6)

		if castPos.distanceTo(target) < 78.
			target = (castPos + angle.toVec(128)).toVec2().withTerrainZ()

		switch id
			case SNOWBALL_SPELL_ID
				new Snowball(castPos, owner, angle, target, lvl)
			case SNOWBOMB_SPELL_ID
				new Snowbomb(castPos, owner, target, lvl)
			case ROLLINGBALL_SPELL_ID
				new Rollingball(pos.polarProject(16, angle, (90).asAngleDegrees()).add(0,0,16), owner, angle)
			case SNOWMAN_SPELL_ID
				new SnowmanMissile(castPos, owner, target.toVec2(), lvl)
			case ICEWALL_SPELL_ID
				new IceMissile(castPos, owner, target, lvl)
			case ICESHARD_SPELL_ID
				if lvl > 2
					new Iceshard(castPos, owner, angle + 18.5 .fromDeg(), lvl - 3)
					new Iceshard(castPos, owner, angle, lvl - 3)
					new Iceshard(castPos, owner, angle - 18.5 .fromDeg(), lvl - 3)
				else
					new Iceshard(castPos, owner, angle, lvl - 1)
			case JUMP_ID
				if not flying
					actor.setAnimation("walk")
					addVel(angle.toVec(sliding ? 2.35 : 10.05).withZ(7.05))
					flashEffect(Abilities.batTrollMissile, pos)

	function onDeath()
		var p = GetKillingUnit().getOwner()
		var p2 = GetDyingUnit().getOwner()
		if wrapBar != null
			wrapBar.terminate()
		if excl != null
			excl.destr()
			excl = null
			announcers[10].play()
			flashEffect(Abilities.pileofGold, pos)
			getEnemyChildren(owner).forEach(child -> child.owner.addGold(150))
		adjustKills(p, p2, getEnemyChildren(p))
		flashEffect(Objects.humanBloodPeasant, pos)

		doAfter(6.5) ->
			if pData[owner.getId()] != null
				if owner.getId() > 4
					actor.revive(RIGHT_SPAWN, false)
					setPos(RIGHT_SPAWN.withTerrainZ() + vec3(64. * owner.getId() - 5, 0, 535.))
				else
					actor.revive(LEFT_SPAWN, false)
					setPos(LEFT_SPAWN.withTerrainZ() + vec3(64. * owner.getId(), 0, 535.))

				addSpawnShield()
				setVel(vec3(0,0,0))
				actor..setVertexColor(255,255,255,255)
				..setPropWindow(60 .fromDeg())
				UnitResetCooldown(actor)
				owner..clearSelection()
				..panCamToTimed(actor, 1.)
				..select(actor)

	override function update()
		physicsUpdate(this)
		if getPos().toVec2().getTile().getType() == Tiles.northrend_Ice
			slidespeed = slidespeed.lerp(1.75, 0.025)
			sliding = true
		else
			slidespeed = slidespeed.lerp(0.0001, 0.125)
			sliding = false
		actor.setMoveSpeed(275 * (1 - (slidespeed / 2)))
		let newvec = actor.getFacingAngle().toVec(hasPresent ? slidespeed * 0.2 : slidespeed)
		addVel((slidevec + newvec * 0.5).toVec3())
		slidevec = newvec

		if not gg_rct_arenabounds.contains(pos.toVec2())
			setPos(vec3(0,3600,200))
			setVel(vec3(0,0,0))
		if excl != null and actor.getHP() > 50
			actor.setHP(50)
		super.update()

	override function inAir(Entity e)
		if not e.flying
			e.flying = true
			onEscapeGround()

		Iceblock bounce = null
		for coll from globalWorld.collidables.staticItr()
			if coll instanceof Iceblock and coll.owner.isEnemyOf(owner) and SHAPE_SPHERE.intersect(coll, this)
				bounce = coll castTo Iceblock
				break

		if bounce != null or terrainZ + 8 < (pos + vel*2).getTerrainZ()
			flashEffect(Abilities.bloodImpact, pos)
			vel *= -0.5
			setPos(pos + vel)
			(bounce != null ? bounce.getDummy() : actor).damageTarget(actor, 20)

	override function onEscapeGround()
		actor.setPropWindow(0 .fromDeg())

	override function onGroundHit()
		if vel.z.abs() > 32
			actor.damageTarget(actor, vel.z.abs() * 0.5, ATTACK_TYPE_MELEE)
			flashEffect(Abilities.bloodImpact, pos)
		actor.setPropWindow(60 .fromDeg())

	function addSpawnShield()
		actor.addAbility(AbilityIds.invulnerable)
		let eff = actor.addEffect(Abilities.divineShieldTarget, "origin")
		doAfter(5.) ->
			actor.removeAbility(AbilityIds.invulnerable)
			eff.destr()

	function addExclamationMark()
		excl = actor.addEffect(Abilities.talkToMe, "overhead")

	ondestroy
		if excl != null
			excl.destr()
			excl = null
		humChildren.remove(this)
		orcChildren.remove(this)
		removeCollidable(this)


@compiletime function genJump()
	new ChannelAbilityPreset(JUMP_ID, 1, true)
	..presetTooltipNormal(lvl -> "[|cffFFCC00W|r] |cff7BB5F7Jump")
	..presetTooltipNormalExtended(lvl -> "Jumps into the target direction. Allows you to jump down, but not up, cliffs.")
	..setCooldown(1, 1.95)
	..setManaCost(1, 0)
	..presetCastRange(lvl -> 9999.)
	..presetHotkey("W")
	..presetTargetTypes(Targettype.POINT)
	..presetButtonPosNormal(1, 2)
	..presetFollowThroughTime(lvl -> 0.25)
	..presetIcon(Icons.bTNBootsOfSpeed)

@compiletime function create_w3u_H007()
	new HeroDefinition(ORC_CHILD_ID, UnitIds.villagerkid)
	..setName("Orc Child")
	..setRace(Race.Orc)
	..setSpeedBase(265)
	..setNormalAbilities(commaList(SNOWBALL_SPELL_ID, 'AInv'))
	..setHeroAbilities(commaList(SNOWBOMB_SPELL_ID, SNOWMAN_SPELL_ID, ROLLINGBALL_SPELL_ID, ICESHARD_SPELL_ID, ICEWALL_SPELL_ID))
	..setHitPointsMaximumBase(150)
	..setCanFlee(false)
	..setManaMaximum(20)
	..setManaRegeneration(0.6)
	..setManaInitialAmount(8)
	..setModelFile("war3mapImported\\OrcChild_v3.mdl")
	..setScalingValue(1.4)
	..setProperNames(commaList("Snagakop", "Nazork", "Urtynob", "Morzod", "Shakbad", "Ogsog" , "Snikgrod"))
	..setProperNamesUsed(7)
	..setCollisionSize(0.0)
	..setStrengthPerLevel(1)
	..setAgilityPerLevel(1)
	..setIntelligencePerLevel(1)
	..hideHeroDeathMsg(true)
	..setTurnRate(4.0)

@compiletime function create_w3u_H001()
	new HeroDefinition(HUMAN_CHILD_ID, UnitIds.villagerkid)
	..setName("Human Child")
	..setRace(Race.Human)
	..setNormalAbilities(commaList(SNOWBALL_SPELL_ID, 'AInv'))
	..setHeroAbilities(commaList(SNOWBOMB_SPELL_ID, SNOWMAN_SPELL_ID, ROLLINGBALL_SPELL_ID, ICESHARD_SPELL_ID, ICEWALL_SPELL_ID))
	..setSpeedBase(265)
	..setHitPointsMaximumBase(150)
	..setCanFlee(false)
	..setManaMaximum(20)
	..setManaRegeneration(0.6)
	..setManaInitialAmount(8)
	..setScalingValue(1.4)
	..setProperNames(commaList("Dennis", "Joachim", "Garret", "Jens", "Philip", "Peter", "Florian"))
	..setProperNamesUsed(7)
	..setCollisionSize(0.0)
	..setStrengthPerLevel(1)
	..setAgilityPerLevel(1)
	..setIntelligencePerLevel(1)
	..hideHeroDeathMsg(true)
	..setTurnRate(4.0)
